String.prototype.trim = function() 
{
	return this.replace(/(^\s*)|(\s*$)/g, "");
}

/**
 * text, password, textarea 폼 객체의 최소, 최대자리수 유효여부를 비교한다.
 * 
 * @param obj			text, password, textarea 폼 객체의 아이디
 * @param objTitle		해당 폼 객체의 명칭(경고메시지에 사용)	
 * @param minLength		허용최소자리수
 * @param maxLength		허용최대자리수
 * @param mandatory		필수값 여부
 * @returns {Boolean}	유효여부 
 */
function g_validateText(obj, objTitle, minLength, maxLength, mandatory) {
	var	value	= $.trim($(obj).val());		// trim
	$(obj).val(value);
	
	if (mandatory && (value == null || value == '')) {
		return false;
	}
	
	if (minLength > 0) {	// 최소/최대자리수 비교
		if (value != null && value != '' && (value.length < minLength || value.length > maxLength)) {
			fnAlertOpen(objTitle + '(은)는 ' + minLength + '~' + maxLength + '자리로 입력하셔야 합니다.');
			return false;
		}
	}
	
	return true;
}

/**
 * 숫자형식 판별
 * 
 * @param obj
 * @param objTitle
 * @param mandatory
 * @returns {Boolean}
 */
function g_validateNumber(obj, objTitle, mandatory) {
	var	value	= $.trim($(obj).val());		// trim
	$(obj).val(value);
	
	if (mandatory && (value == null || value == '')) {
		return false;
	}

	if (value != '' && value != null) {
		if (isNaN(value)) {
			fnAlertOpen(objTitle + '은(는) 숫자로 입력하셔야 합니다.');
			return false;
		}
	}
	
	return true;
}


//문자입력 금지 함수 설정
function fncOnlyNumber(obj) 
{
	if(event.keyCode != 9)
	{
		if( event.keyCode < 48 || event.keyCode > 57)
		{
			event.keyCode=0;
		}
		
		if(isNaN(obj.value))
		{
		    //return ""+obj.value.substr(0, obj.value.length-1);
		    //fnAlertOpen(obj.value);
		    fnAlertOpen("문자는 사용할 수 없습니다.");
		    obj.value = obj.value.substr(0, obj.value.length-1);
		    //fnAlertOpen(obj.value);
	    }
		//if(obj.value==0) return obj.value
	
	    obj.value = obj.value;
	}
}

//email validation check
function email_check(obj)
{
	var	value	= $.trim($(obj).val());		// trim
	
	if(value == '')
	{
		fnAlertOpen('이메일을 입력하세요.');
		frm.email.focus();
		return false;
	}
	else if(value.indexOf('@') == -1 || value.indexOf('*') != -1)
	{
		fnAlertOpen('이메일 형식이 유효하지 않습니다.');
		$(obj).focus();
		return false;
	}
	else
	{
		var array_data = value.split("@");
		if(array_data.length == 1 || array_data[1].indexOf('.') == -1)
		{
			fnAlertOpen('이메일 형식이 유효하지 않습니다.');
			$(obj).focus();
			return false;
		}
		else
		{
			var tmp = array_data[1].split(".");
			if(tmp[1] == '')
			{
				fnAlertOpen('이메일 형식이 유효하지 않습니다.');
				$(obj).focus();
				return false;
			}
		}
	}
	
	return true;
}


//password valid check
function password_check(obj)
{
	var	value			= $.trim($(obj).val());		// 비밀번호
	//var	confrimvalue	= $.trim($(confirmobj).val());		// 비밀번호 확인

	var pattern = /^[a-zA-Z0-9]{3,50}$/;   //패턴을 정의합니다
	var match = pattern.exec(value);  //입력된 값을 패턴에 적용한다 
	
	if(value.length < 6) 
	{
		fnAlertOpen("비밀번호는 최소6자이상 입력해야합니다.") ;
		return false;
	}
	
	if (match == null) //패턴과 일치하지 않는다면
	{
		fnAlertOpen("비밀번호는 영문자와 숫자만 입력 가능합니다.") ;
		value = "";
		//confrimvalue = "";
		$(obj).focus() ;
		return false;
	}
	
	
	
	var pattern1 = /[a-zA-Z]{1,50}/;   //패턴을 정의합니다
	var match1 = pattern1.exec(value);  //입력된 값을 패턴에 적용한다 
	
	var pattern2 = /[0-9]{1,50}/;   //패턴을 정의합니다
	var match2 = pattern2.exec(value);  //입력된 값을 패턴에 적용한다 
	
	if(match1 == null || match2 == null)
	{
		fnAlertOpen("비밀번호는 영문자와 숫자를 혼용해야 합니다.") ;
		value = "";
		//confrimvalue = "";
		$(obj).focus() ;
		return false;
	}
	 
	return true;
}

function isPhoneNumber(ob, gubun) {
	if(ob.length < gubun){
		return false;
	}
	var pattern = /^[0-9]{3,4}$/gi;   //패턴을 정의합니다
	var match = pattern.exec(ob);  //입력된 값을 패턴에 적용한다 
	if(match == null){
		return false;
	}
	return true;
}

function isPhoneNumber1(ob, gubun) {
	if(ob.length < gubun){
		return false;
	}
	var pattern = /^[0-9]{2,4}$/gi;   //패턴을 정의합니다
	var match = pattern.exec(ob);  //입력된 값을 패턴에 적용한다 
	if(match == null){
		return false;
	}
	return true;
}

function isGrade(ob, gubun) {
	 if (event.keyCode >= 48 && event.keyCode <= 57) { //숫자키만 입력
	        return true;
	    } else {
	        event.returnValue = false;
	    }
}



function isID(val){
	var pattern = /^[\S]{1,50}$/;   //패턴을 정의합니다
	var match = pattern.exec(val);  //입력된 값을 패턴에 적용한다
	if(match==null) {
		return true;
	}
	return false;
}

function fnPaste(){
	var regex = /\D/ig;
	if(regex.test(window.clipboardData.getData("text"))){
		return false;
	}else{
		return true;
	}
}

function numeric(){
	if((event.keyCode > 47 && event.keyCode < 58) || (event.keyCode > 96 && event.keyCode < 105) || event.keyCode == 8 || event.keyCode == 9){
		event.returnValue = true;
	}else{
		event.returnValue = false;
		return;
	}
}

function no_special(){
	if( (event.keyCode > 32 && event.keyCode < 48) || (event.keyCode > 57 && event.keyCode < 65) || (event.keyCode > 90 && event.keyCode < 97) ){
		event.returnValue = false;
	}
}

function no_special_for_email(){
	// . _ - 허용 
	if( (event.keyCode > 32 && event.keyCode < 45) || event.keyCode == 47 || (event.keyCode > 57 && event.keyCode < 65) || (event.keyCode > 90 && event.keyCode < 94) || event.keyCode == 96 ){
		event.returnValue = false;
	}
}


function emailCheck(str)
{
	if(str.search((/(\S+)@(\S+)\.(\S+)/)) == -1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

function email2Check(str) {
	if(str.search((/(\S+)\.(\S+)/)) == -1) {
		return true;
	} else {
		return false;
	}
}


function fnAlertOpen(cont) {
	$("#alert_ment").html(cont);
	fnLayerOpen('alert');
}
function fnLayerOpen(id){
	$('#' + id).fadeIn();
	var temp = $('#'+id+" .popup_layer_cont");
	if (temp.outerHeight() < $(document).height() ) temp.css('margin-top', '-'+temp.outerHeight()/2+'px');
	else temp.css('top', '0px');
	if (temp.outerWidth() < $(document).width() ) temp.css('margin-left', '-'+temp.outerWidth()/2+'px');
	else temp.css('left', '0px');
	if(id == 'popup_quick'){
		if($('#' + id).length){
			const html = document.querySelector('html');
			const body = document.querySelector('body');
			let scrollPosition = 0;
		    scrollPosition = window.pageYOffset;
		    
		    body.classList.add('scrollLock');
//		    body.style.top = '-' + scrollPosition + 'px';
		    body.style.width = '100%';
		    
	//	    body.style.overflow = 'hidden';
	//	    body.style.width = 'calc(100% - 8px)';
//		    body.style.height = '100vh';
		    
		    $('.header').css({'padding-right':'88px'});
		    $('.quick_consult').css({'right':'55px'});
		    
		    $('#' + id).find('.popup_layer_bg, .popup_quick_close').click(function(){
		    	$('.quick_category_detail input').each(function() {
		  		  this.checked = false;
		    	});
		    	
		    	body.classList.remove('scrollLock');
				body.style.removeProperty('top');
		    	body.style.removeProperty('width');
//				body.style.removeProperty('height');
				window.scrollTo(0, scrollPosition);
				
				$('.header').css({'padding-right':'80px'});
				$('.quick_consult').css({'right':'47px'});
				
				$('#' + id).fadeOut();
		        return false;
		    });
		} else {
			return false;
		}
	}
}
function fnLayerClose(id) {
	if(id != undefined){
		$("#" + id).fadeOut();
	} else {
		$(".popup_layer").fadeOut();
	}
}

function formatMobileNumber(input) {
	console.log("inpput : " + input)
	  var formattedValue = input.value.replace(/[^\d-]/g, '');
	  formattedValue = formattedValue.slice(0, 13);
	  if (formattedValue.length > 3 && formattedValue.charAt(3) !== '-') {
	    formattedValue = formattedValue.slice(0, 3) + '-' + formattedValue.slice(3);
	  }
	  if (formattedValue.length > 8 && formattedValue.charAt(8) !== '-') {
	    formattedValue = formattedValue.slice(0, 8) + '-' + formattedValue.slice(8);
	  }
	  input.value = formattedValue;
	}
	

function moveToSecondInput(fisrt, second) {
  const firstInput = document.getElementById(fisrt);
  const secondInput = document.getElementById(second);

  firstInput.addEventListener('input', function(event) {
    let inputValue = event.target.value;
    inputValue = inputValue.replace(/\D/g, ''); 
    if (inputValue.length > 3) {
      inputValue = inputValue.substring(0, 3); 
      secondInput.focus();
    }
    event.target.value = inputValue; 
  });
}



function moveToThirdInput(second, third) {
  const secondInput = document.getElementById(second);
  const thirdInput = document.getElementById(third);

  secondInput.addEventListener('input', function(event) {
    let inputValue = event.target.value;
    inputValue = inputValue.replace(/\D/g, ''); 
    if (inputValue.length > 3) {
      inputValue = inputValue.substring(0, 4); 
      thirdInput.focus();
    }
    event.target.value = inputValue; 
  });
}


function limitThirdInput(third) {
  const thirdInput = document.getElementById(third);

  thirdInput.addEventListener('input', function(event) {
    let inputValue = event.target.value;
    inputValue = inputValue.replace(/\D/g, ''); 
    if (inputValue.length > 3) {
      inputValue = inputValue.substring(0, 4); 
    }
    event.target.value = inputValue; 
  });
}

function handleTabKey(event, moveto) {
	if (event.keyCode === 9) {
	  event.preventDefault();
	  document.getElementById(moveto).focus();
	  document.getElementById(moveto).setSelectionRange(4, 4);
	}
}

function convertToUppercaseIfEnglish(inputElement) {
    var inputText = inputElement.value;
    
    if (/^[A-Za-z]+$/.test(inputText)) {
        inputElement.value = inputText.toUpperCase();
    }
}


